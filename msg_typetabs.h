/* This is a generated file, see Makefile.am for its inputs. */
#include <stddef.h>
#include <stdint.h>

/* Assumes ASCII; verified in gen_tables.c. */
#define GT_ISUPPER(X) ((X) >= 'A' && (X) <= 'Z')
#define GT_ISLOWER(X) ((X) >= 'a' && (X) <= 'z')

inline static int s2i__(const char *strings, const unsigned *s_table,
			const int *i_table, size_t n, const char *s, int *value)
{
	ssize_t left, right;

	left = 0;
	right = n - 1;
	while (left <= right) {	/* invariant: left <= x <= right */
		size_t mid;
		int r;

		mid = (left + right) / 2;
		/* FIXME? avoid recomparing a common prefix */
		r = strcmp(s, strings + s_table[mid]);
		if (r == 0) {
			*value = i_table[mid];
			return 1;
		}
		if (r < 0)
			right = mid - 1;
		else
			left = mid + 1;
	}
	return 0;
}

inline static const char *i2s_direct__(const char *strings,
				       const unsigned *table, int min, int max,
				       int v)
{
	unsigned off;

	if (v < min || v > max)
		return NULL;
	off = table[v - min];
	if (off != -1u)
		return strings + off;
	return NULL;
}

inline static const char *i2s_bsearch__(const char *strings,
					const int *i_table,
					const unsigned *s_table, size_t n,
					int v)
{
	ssize_t left, right;

	left = 0;
	right = n - 1;
	while (left <= right) {	/* invariant: left <= x <= right */
		size_t mid;
		int mid_val;

		mid = (left + right) / 2;
		mid_val = i_table[mid];
		if (v == mid_val)
			return strings + s_table[mid];
		if (v < mid_val)
			right = mid - 1;
		else
			left = mid + 1;
	}
	return NULL;
}

static const char msg_type_strings[] = "ACCT_LOCK\0ACCT_UNLOCK\0ADD_GROUP\0ADD_USER\0ANOM_ABEND\0ANOM_ACCESS_FS\0ANOM_ADD_ACCT\0ANOM_AMTU_FAIL\0ANOM_CRYPTO_FAIL\0ANOM_DEL_ACCT\0"
	"ANOM_EXEC\0ANOM_LINK\0ANOM_LOGIN_ACCT\0ANOM_LOGIN_FAILURES\0ANOM_LOGIN_LOCATION\0ANOM_LOGIN_SERVICE\0ANOM_LOGIN_SESSIONS\0ANOM_LOGIN_TIME\0ANOM_MAX_DAC\0ANOM_MAX_MAC\0"
	"ANOM_MK_EXEC\0ANOM_MOD_ACCT\0ANOM_PROMISCUOUS\0ANOM_RBAC_FAIL\0ANOM_RBAC_INTEGRITY_FAIL\0ANOM_ROOT_TRANS\0AVC\0AVC_PATH\0BPRM_FCAPS\0CAPSET\0"
	"CHGRP_ID\0CHUSER_ID\0CONFIG_CHANGE\0CRED_ACQ\0CRED_DISP\0CRED_REFR\0CRYPTO_FAILURE_USER\0CRYPTO_IKE_SA\0CRYPTO_IPSEC_SA\0CRYPTO_KEY_USER\0"
	"CRYPTO_LOGIN\0CRYPTO_LOGOUT\0CRYPTO_PARAM_CHANGE_USER\0CRYPTO_REPLAY_USER\0CRYPTO_SESSION\0CRYPTO_TEST_USER\0CWD\0DAC_CHECK\0DAEMON_ABORT\0DAEMON_ACCEPT\0"
	"DAEMON_CLOSE\0DAEMON_CONFIG\0DAEMON_END\0DAEMON_ERR\0DAEMON_RESUME\0DAEMON_ROTATE\0DAEMON_START\0DEL_GROUP\0DEL_USER\0DEV_ALLOC\0"
	"DEV_DEALLOC\0EOE\0EXECVE\0FANOTIFY\0FD_PAIR\0FEATURE_CHANGE\0FS_RELABEL\0GRP_AUTH\0GRP_CHAUTHTOK\0GRP_MGMT\0"
	"INTEGRITY_DATA\0INTEGRITY_EVM_XATTR\0INTEGRITY_HASH\0INTEGRITY_METADATA\0INTEGRITY_PCR\0INTEGRITY_RULE\0INTEGRITY_STATUS\0IPC\0IPC_SET_PERM\0KERNEL\0"
	"KERNEL_OTHER\0KERN_MODULE\0LABEL_LEVEL_CHANGE\0LABEL_OVERRIDE\0LOGIN\0MAC_CALIPSO_ADD\0MAC_CALIPSO_DEL\0MAC_CHECK\0MAC_CIPSOV4_ADD\0MAC_CIPSOV4_DEL\0"
	"MAC_CONFIG_CHANGE\0MAC_IPSEC_ADDSA\0MAC_IPSEC_ADDSPD\0MAC_IPSEC_DELSA\0MAC_IPSEC_DELSPD\0MAC_IPSEC_EVENT\0MAC_MAP_ADD\0MAC_MAP_DEL\0MAC_POLICY_LOAD\0MAC_STATUS\0"
	"MAC_UNLBL_ALLOW\0MAC_UNLBL_STCADD\0MAC_UNLBL_STCDEL\0MMAP\0MQ_GETSETATTR\0MQ_NOTIFY\0MQ_OPEN\0MQ_SENDRECV\0NETFILTER_CFG\0NETFILTER_PKT\0"
	"OBJ_PID\0PATH\0PROCTITLE\0RESP_ACCT_LOCK\0RESP_ACCT_LOCK_TIMED\0RESP_ACCT_REMOTE\0RESP_ACCT_UNLOCK_TIMED\0RESP_ALERT\0RESP_ANOMALY\0RESP_EXEC\0"
	"RESP_HALT\0RESP_KILL_PROC\0RESP_ORIGIN_BLOCK\0RESP_ORIGIN_BLOCK_TIMED\0RESP_SEBOOL\0RESP_SINGLE\0RESP_TERM_ACCESS\0RESP_TERM_LOCK\0ROLE_ASSIGN\0ROLE_MODIFY\0"
	"ROLE_REMOVE\0SECCOMP\0SELINUX_ERR\0SERVICE_START\0SERVICE_STOP\0SOCKADDR\0SOCKETCALL\0SOFTWARE_UPDATE\0SYSCALL\0SYSTEM_BOOT\0"
	"SYSTEM_RUNLEVEL\0SYSTEM_SHUTDOWN\0TEST\0TIME_ADJNTPVAL\0TIME_INJOFFSET\0TRUSTED_APP\0TTY\0USER\0USER_ACCT\0USER_AUTH\0"
	"USER_AVC\0USER_CHAUTHTOK\0USER_CMD\0USER_DEVICE\0USER_END\0USER_ERR\0USER_LABELED_EXPORT\0USER_LOGIN\0USER_LOGOUT\0USER_MAC_CONFIG_CHANGE\0"
	"USER_MAC_POLICY_LOAD\0USER_MGMT\0USER_ROLE_CHANGE\0USER_SELINUX_ERR\0USER_START\0USER_TTY\0USER_UNLABELED_EXPORT\0USYS_CONFIG\0VIRT_CONTROL\0VIRT_CREATE\0"
	"VIRT_DESTROY\0VIRT_INTEGRITY_CHECK\0VIRT_MACHINE_ID\0VIRT_MIGRATE_IN\0VIRT_MIGRATE_OUT\0VIRT_RESOURCE";
static const unsigned msg_type_s2i_s[] = {
	0,10,22,32,41,52,67,81,96,113,
	127,137,147,163,183,203,222,242,258,271,
	284,297,311,328,343,368,384,388,397,408,
	415,424,434,448,457,467,477,497,511,527,
	543,556,570,595,614,629,646,650,660,673,
	687,700,714,725,736,750,764,777,787,796,
	806,818,822,829,838,846,861,872,881,895,
	904,919,939,954,973,987,1002,1019,1023,1036,
	1043,1056,1068,1087,1102,1108,1124,1140,1150,1166,
	1182,1200,1216,1233,1249,1266,1282,1294,1306,1322,
	1333,1349,1366,1383,1388,1402,1412,1420,1432,1446,
	1460,1468,1473,1483,1498,1519,1536,1559,1570,1583,
	1593,1603,1618,1636,1660,1672,1684,1701,1716,1728,
	1740,1752,1760,1772,1786,1799,1808,1819,1835,1843,
	1855,1871,1887,1892,1907,1922,1934,1938,1943,1953,
	1963,1972,1987,1996,2008,2017,2026,2046,2057,2069,
	2092,2113,2123,2140,2157,2168,2177,2199,2211,2224,
	2236,2249,2270,2286,2302,2319,
};
static const int msg_type_s2i_i[] = {
	1135,1136,1116,1114,1701,2111,2114,2107,2110,2115,
	2112,1702,2103,2100,2104,2118,2102,2101,2105,2106,
	2113,2116,1700,2108,2109,2117,1400,1402,1321,1322,
	1119,1125,1305,1103,1104,1110,2405,2408,2409,2404,
	2402,2403,2401,2406,2407,2400,1307,1118,1202,1207,
	1208,1203,1201,1209,1206,1205,1200,1117,1115,2307,
	2308,1320,1309,1331,1317,1328,2309,1126,1133,1132,
	1800,1806,1803,1801,1804,1805,1802,1303,1311,2000,
	1316,1330,2304,2303,1006,1418,1419,1134,1407,1408,
	1405,1411,1413,1412,1414,1415,1409,1410,1403,1404,
	1406,1416,1417,1323,1315,1314,1312,1313,1325,1324,
	1318,1302,1327,2207,2205,2204,2206,2201,2200,2210,
	2212,2202,2213,2214,2209,2211,2203,2208,2301,2311,
	2302,1326,1401,1130,1131,1306,1304,1138,1300,1127,
	1129,1128,1120,1333,1332,1121,1319,1005,1101,1100,
	1107,1108,1123,1137,1106,1109,2305,1112,1113,2312,
	2310,1102,2300,1122,1105,1124,2306,1111,2500,2504,
	2505,2503,2502,2506,2507,2501,
};

static int msg_type_s2i(const char *s, int *value) {
	size_t len, i;
	 if (s == NULL || value == NULL)
		return 0;
	len = strlen(s);
	{ char copy[len + 1];
	for (i = 0; i < len; i++) {
		char c = s[i];
		copy[i] = GT_ISLOWER(c) ? c - 'a' + 'A' : c;
	}
	copy[i] = 0;
	return s2i__(msg_type_strings, msg_type_s2i_s, msg_type_s2i_i, 176, copy, value);
	}
}
static const int msg_type_i2s_i[] = {
	1005,1006,1100,1101,1102,1103,1104,1105,1106,1107,
	1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,
	1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,
	1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,
	1138,1200,1201,1202,1203,1205,1206,1207,1208,1209,
	1300,1302,1303,1304,1305,1306,1307,1309,1311,1312,
	1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,
	1323,1324,1325,1326,1327,1328,1330,1331,1332,1333,
	1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,
	1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,
	1700,1701,1702,1800,1801,1802,1803,1804,1805,1806,
	2000,2100,2101,2102,2103,2104,2105,2106,2107,2108,
	2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,
	2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,
	2210,2211,2212,2213,2214,2300,2301,2302,2303,2304,
	2305,2306,2307,2308,2309,2310,2311,2312,2400,2401,
	2402,2403,2404,2405,2406,2407,2408,2409,2500,2501,
	2502,2503,2504,2505,2506,2507,
};
static const unsigned msg_type_i2s_s[] = {
	1938,1102,1953,1943,2113,448,457,2157,2008,1963,
	1972,2017,467,2199,2046,2057,32,787,22,777,
	650,415,1887,1922,2140,1987,2168,424,872,1843,
	1871,1855,1772,1786,895,881,1140,0,10,1996,
	1819,764,714,660,700,750,736,673,687,725,
	1835,1468,1019,1808,434,1799,646,822,1023,1412,
	1420,1402,1388,1043,838,1460,1934,818,397,408,
	1383,1446,1432,1752,1473,846,1056,829,1907,1892,
	384,1760,388,1306,1322,1182,1333,1150,1166,1282,
	1294,1200,1233,1216,1249,1266,1349,1366,1108,1124,
	311,41,137,904,954,1002,939,973,987,919,
	1036,163,242,222,147,183,258,271,81,328,
	343,96,52,127,284,67,113,297,368,203,
	1570,1559,1603,1684,1519,1498,1536,1483,1701,1660,
	1583,1672,1593,1618,1636,2123,1716,1740,1087,1068,
	2026,2177,796,806,861,2092,1728,2069,629,570,
	543,556,527,477,595,614,497,511,2211,2319,
	2270,2249,2224,2236,2286,2302,
};
static const char *msg_type_i2s(int v) {
	return i2s_bsearch__(msg_type_strings, msg_type_i2s_i, msg_type_i2s_s, 176, v);
}
